/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ChessGui;

import ChessCore.*;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author ahmed
 */
public class WhitePawnPromotion extends javax.swing.JFrame  {

    /**
     * Creates new form WhitePawnPromotion
     */
    private ClassicChessGame game;
    private JButton[][] buttons;
   
    private PawnPromotion p;
    private int btnRow;
    private int btnCol;
    private Square holdSrcSquare;
    private Square destSquare;

    public void setBtnRow(int x) {
        this.btnRow = x;
    }

    public void setBtnCol(int x) {
        this.btnCol = x;
    }

    public void setSrcSquare(Square s) {
        this.holdSrcSquare = s;
    }

    public void setdestSquare(Square s) {
        this.destSquare = s;
    }

    public void setChessGame(ClassicChessGame game) {
        this.game = game;
    }

    public ClassicChessGame getChessGame() {
        return game;
    }

    public void setButtons(JButton[][] buttons) {
        this.buttons = buttons;
    }

    public JButton[][] getButtons() {
        return buttons;
    }

    public WhitePawnPromotion() {
        initComponents();

    }

    public PawnPromotion getPawnPromotion() {
        return p;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setIcon(new javax.swing.ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteQueen.png")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteKnight.png")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteBishop.png")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteRook.png")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(184, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Queen button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        p = PawnPromotion.Queen;

        whitePromotion(this.btnRow, this.btnCol, p);

        Move move = new Move(holdSrcSquare, destSquare, p);
        game.makeMove(move);
        this.gameStatusForGui();
        this.setVisible(false);
      


    }//GEN-LAST:event_jButton1ActionPerformed

    // kinght button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        p = PawnPromotion.Knight;
        whitePromotion(this.btnRow, this.btnCol, p);

        Move move = new Move(holdSrcSquare, destSquare, p);
        game.makeMove(move);
        this.gameStatusForGui();
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    // bishop button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        p = PawnPromotion.Bishop;
        whitePromotion(this.btnRow, this.btnCol, p);

        Move move = new Move(holdSrcSquare, destSquare, p);
        game.makeMove(move);
        this.gameStatusForGui();
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    // rook button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        p = PawnPromotion.Rook;
        whitePromotion(this.btnRow, this.btnCol, p);

        Move move = new Move(holdSrcSquare, destSquare, p);
        game.makeMove(move);
        this.gameStatusForGui();
        this.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WhitePawnPromotion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WhitePawnPromotion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WhitePawnPromotion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WhitePawnPromotion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new WhitePawnPromotion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    // End of variables declaration//GEN-END:variables

   
    private void whitePromotion(int btnRow, int btnCol, PawnPromotion p) {

        ImageIcon whiteBishop = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteBishop.png");
        ImageIcon whiteKing = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteKing.png");
        ImageIcon whiteKnight = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteKnight.png");
        ImageIcon whitePawn = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhitePawn.png");
        ImageIcon whiteQueen = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteQueen.png");
        ImageIcon whiteRook = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteRook.png");
      

        // convert from source square rank and file to row and col of buttons
        int srcbuttonRank = 8 - (holdSrcSquare.getRank().getValue() + 1);
        int srcbuttonFile = holdSrcSquare.getFile().getValue();
        if (p == PawnPromotion.Queen) {
            buttons[btnRow][btnCol].setIcon(whiteQueen);
            buttons[srcbuttonRank][srcbuttonFile].setIcon(null);

        } else if (p == PawnPromotion.Bishop) {
            buttons[btnRow][btnCol].setIcon(whiteBishop);
            buttons[srcbuttonRank][srcbuttonFile].setIcon(null);

        } else if (p == PawnPromotion.Knight) {
            buttons[btnRow][btnCol].setIcon(whiteKnight);
            buttons[srcbuttonRank][srcbuttonFile].setIcon(null);

        } else if (p == PawnPromotion.Rook) {
            buttons[btnRow][btnCol].setIcon(whiteRook);
            buttons[srcbuttonRank][srcbuttonFile].setIcon(null);

        }
    }
    
    public void gameStatusForGui() {

        ImageIcon whiteKing = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\WhiteKing.png");

        ImageIcon blackKing = new ImageIcon("D:\\prog2-assignments\\ChessGame\\piecesImj\\BlackKing.png");

        if (game.getGameStatus() == GameStatus.BLACK_UNDER_CHECK) {

            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (buttons[i][j].getIcon() != null && compareIcons((ImageIcon) buttons[i][j].getIcon(), blackKing)) {

                        buttons[i][j].setBackground(Color.red);
                    }
                }
            }
        } else if (game.getGameStatus() == GameStatus.WHITE_UNDER_CHECK) {

            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (buttons[i][j].getIcon() != null && compareIcons((ImageIcon) buttons[i][j].getIcon(), whiteKing)) {
                        buttons[i][j].setBackground(Color.red);
                    }
                }
            }
        } else if (game.getGameStatus() == GameStatus.WHITE_WON) {
            JOptionPane.showMessageDialog(null, "White Won by checkmate");
        } else if (game.getGameStatus() == GameStatus.BLACK_WON) {
            JOptionPane.showMessageDialog(null, "Black Won by checkmate");
        }

    }
    public boolean compareIcons(ImageIcon button, ImageIcon piece) {
        JLabel buttonLabel = new JLabel(button);
        JLabel pieceLabel = new JLabel(piece);

        if (buttonLabel.getIcon().toString().equals(pieceLabel.getIcon().toString())) {
            return true;
        } else {
            return false;
        }

    }
}
